"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ParseError = exports.RouteError = undefined;

var _node = require("./node");

var _node2 = _interopRequireDefault(_node);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let RouteError = exports.RouteError = class RouteError extends Error {
  constructor(route, message) {
    super(`Route '${route.toString()}' ${message}`);

    Error.captureStackTrace(this, this.constructor);
    Object.freeze(this);
  }
};
let ParseError = exports.ParseError = class ParseError extends Error {
  constructor(pattern, message) {
    super(`Pattern '${pattern}' ${message}`);

    Error.captureStackTrace(this, this.constructor);
    Object.freeze(this);
  }
};
let Route = class Route {
  static parse(method, route) {
    method = method.toUpperCase();
    const parts = [new _node2.default(method)].concat(parse(route));
    return new Route(parts);
  }

  static create(path) {
    const parts = path.map(node => node.clone());
    return new Route(parts);
  }

  constructor(parts) {
    this.parts = parts;

    for (const part of this.parts) Object.freeze(part);
    Object.freeze(this);
  }

  prefix(prefix) {
    const path = this.parts.slice(1);
    const parts = [this.parts[0]].concat(parse(prefix)).concat(path);
    return new Route(parts);
  }

  get method() {
    return this.parts[0].toString();
  }

  get path() {
    return "/" + this.parts.slice(1).map(part => part.toString()).join("/");
  }

  inspect() {
    return this.toString();
  }

  toString() {
    return `${this.method} ${this.path}`;
  }
};
exports.default = Route;


function parse(route) {
  const nodes = [];
  const params = new Set();

  for (const part of route.split("/")) {
    if (!part.length) continue;

    let node;
    if (part[0] === "{" && part[part.length - 1] === "}") {
      const param = part.substring(1, part.length - 1);
      if (params.has(param)) {
        throw new ParseError(route, `has duplicate param {${param}}`);
      }

      params.add(param);
      node = new _node2.default(param, /.+/);
    } else {
      node = new _node2.default(part);
    }

    nodes.push(node);
  }

  return nodes;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXIvcm91dGUuanMiXSwibmFtZXMiOlsiUm91dGVFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJyb3V0ZSIsIm1lc3NhZ2UiLCJ0b1N0cmluZyIsImNhcHR1cmVTdGFja1RyYWNlIiwiT2JqZWN0IiwiZnJlZXplIiwiUGFyc2VFcnJvciIsInBhdHRlcm4iLCJSb3V0ZSIsInBhcnNlIiwibWV0aG9kIiwidG9VcHBlckNhc2UiLCJwYXJ0cyIsImNvbmNhdCIsImNyZWF0ZSIsInBhdGgiLCJtYXAiLCJub2RlIiwiY2xvbmUiLCJwYXJ0IiwicHJlZml4Iiwic2xpY2UiLCJqb2luIiwiaW5zcGVjdCIsIm5vZGVzIiwicGFyYW1zIiwiU2V0Iiwic3BsaXQiLCJsZW5ndGgiLCJwYXJhbSIsInN1YnN0cmluZyIsImhhcyIsImFkZCIsInB1c2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQTs7Ozs7O0lBRWFBLFUsV0FBQUEsVSxHQUFOLE1BQU1BLFVBQU4sU0FBeUJDLEtBQXpCLENBQStCO0FBQ3BDQyxjQUFZQyxLQUFaLEVBQTBCQyxPQUExQixFQUEyQztBQUN6QyxVQUFPLFVBQVNELE1BQU1FLFFBQU4sRUFBaUIsS0FBSUQsT0FBUSxFQUE3Qzs7QUFFQUgsVUFBTUssaUJBQU4sQ0FBd0IsSUFBeEIsRUFBOEIsS0FBS0osV0FBbkM7QUFDQUssV0FBT0MsTUFBUCxDQUFjLElBQWQ7QUFDRDtBQU5tQyxDO0lBU3pCQyxVLFdBQUFBLFUsR0FBTixNQUFNQSxVQUFOLFNBQXlCUixLQUF6QixDQUErQjtBQUNwQ0MsY0FBWVEsT0FBWixFQUE2Qk4sT0FBN0IsRUFBOEM7QUFDNUMsVUFBTyxZQUFXTSxPQUFRLEtBQUlOLE9BQVEsRUFBdEM7O0FBRUFILFVBQU1LLGlCQUFOLENBQXdCLElBQXhCLEVBQThCLEtBQUtKLFdBQW5DO0FBQ0FLLFdBQU9DLE1BQVAsQ0FBYyxJQUFkO0FBQ0Q7QUFObUMsQztJQVNqQkcsSyxHQUFOLE1BQU1BLEtBQU4s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bXBvcnQgTm9kZSBmcm9tIFwiLi9ub2RlXCJcblxuZXhwb3J0IGNsYXNzIFJvdXRlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHJvdXRlOiBSb3V0ZSwgbWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIoYFJvdXRlICcke3JvdXRlLnRvU3RyaW5nKCl9JyAke21lc3NhZ2V9YClcblxuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpXG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQYXJzZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihwYXR0ZXJuOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKGBQYXR0ZXJuICcke3BhdHRlcm59JyAke21lc3NhZ2V9YClcblxuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpXG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvdXRlIHtcbiAgc3RhdGljIHBhcnNlKG1ldGhvZDogc3RyaW5nLCByb3V0ZTogc3RyaW5nKTogUm91dGUge1xuICAgIG1ldGhvZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gICAgY29uc3QgcGFydHMgPSBbbmV3IE5vZGUobWV0aG9kKV0uY29uY2F0KHBhcnNlKHJvdXRlKSlcbiAgICByZXR1cm4gbmV3IFJvdXRlKHBhcnRzKVxuICB9XG5cbiAgc3RhdGljIGNyZWF0ZShwYXRoOiBOb2RlW10pOiBSb3V0ZSB7XG4gICAgY29uc3QgcGFydHMgPSBwYXRoLm1hcChub2RlID0+IG5vZGUuY2xvbmUoKSlcbiAgICByZXR1cm4gbmV3IFJvdXRlKHBhcnRzKVxuICB9XG5cbiAgcGFydHM6IE5vZGVbXVxuXG4gIGNvbnN0cnVjdG9yKHBhcnRzOiBOb2RlW10pIHtcbiAgICB0aGlzLnBhcnRzID0gcGFydHNcblxuICAgIGZvciAoY29uc3QgcGFydCBvZiB0aGlzLnBhcnRzKSBPYmplY3QuZnJlZXplKHBhcnQpXG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKVxuICB9XG5cbiAgcHJlZml4KHByZWZpeDogc3RyaW5nKTogUm91dGUge1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLnBhcnRzLnNsaWNlKDEpXG4gICAgY29uc3QgcGFydHMgPSBbdGhpcy5wYXJ0c1swXV0uY29uY2F0KHBhcnNlKHByZWZpeCkpLmNvbmNhdChwYXRoKVxuICAgIHJldHVybiBuZXcgUm91dGUocGFydHMpXG4gIH1cblxuICBnZXQgbWV0aG9kKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucGFydHNbMF0udG9TdHJpbmcoKVxuICB9XG5cbiAgZ2V0IHBhdGgoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCIvXCIgKyB0aGlzLnBhcnRzLnNsaWNlKDEpLm1hcChwYXJ0ID0+IHBhcnQudG9TdHJpbmcoKSkuam9pbihcIi9cIilcbiAgfVxuXG4gIGluc3BlY3QoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpXG4gIH1cblxuICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLm1ldGhvZH0gJHt0aGlzLnBhdGh9YFxuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlKHJvdXRlOiBzdHJpbmcpIHtcbiAgY29uc3Qgbm9kZXM6IE5vZGVbXSA9IFtdXG4gIGNvbnN0IHBhcmFtcyA9IG5ldyBTZXRcblxuICBmb3IgKGNvbnN0IHBhcnQgb2Ygcm91dGUuc3BsaXQoXCIvXCIpKSB7XG4gICAgaWYgKCFwYXJ0Lmxlbmd0aCkgY29udGludWVcblxuICAgIGxldCBub2RlOiBOb2RlXG4gICAgaWYgKHBhcnRbMF0gPT09IFwie1wiICYmIHBhcnRbcGFydC5sZW5ndGggLSAxXSA9PT0gXCJ9XCIpIHtcbiAgICAgIGNvbnN0IHBhcmFtID0gcGFydC5zdWJzdHJpbmcoMSwgcGFydC5sZW5ndGggLSAxKVxuICAgICAgaWYgKHBhcmFtcy5oYXMocGFyYW0pKSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJzZUVycm9yKHJvdXRlLCBgaGFzIGR1cGxpY2F0ZSBwYXJhbSB7JHtwYXJhbX19YClcbiAgICAgIH1cblxuICAgICAgcGFyYW1zLmFkZChwYXJhbSlcbiAgICAgIG5vZGUgPSBuZXcgTm9kZShwYXJhbSwgLy4rLylcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZSA9IG5ldyBOb2RlKHBhcnQpXG4gICAgfVxuXG4gICAgbm9kZXMucHVzaChub2RlKVxuICB9XG5cbiAgcmV0dXJuIG5vZGVzXG59XG4iXX0=