"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.use = use;
function use(middleware) {
  if (typeof middleware !== "function") {
    throw new TypeError("Middleware must be function");
  }

  if (middleware.length !== 1) {
    throw new TypeError("Middleware must take exactly 1 argument");
  }

  const fn = (object, key, descriptor) => {
    if (descriptor) {
      attach(descriptor.value, middleware);
    } else {
      attachRecursively(object.prototype, middleware);
    }
  };

  Object.defineProperty(fn, "name", { value: middleware.name });
  return fn;
}


function attachRecursively(object, middleware) {
  if (object.router) {
    for (const handler of object.router.handlers) {
      attach(handler, middleware);
    }
  }
}

function attach(handler, middleware) {
  if (typeof handler === "function") {
    stackify(handler).unshift(middleware);
  } else {
    throw new TypeError("Expected descriptor to be a function");
  }
}

function stackify(object) {
  if (!object.stack) {
    Object.defineProperty(object, "stack", {
      value: []
    });
  }

  return object.stack;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kZWNvcmF0ZS91c2UuanMiXSwibmFtZXMiOlsidXNlIiwibWlkZGxld2FyZSIsIlR5cGVFcnJvciIsImxlbmd0aCIsImZuIiwib2JqZWN0Iiwia2V5IiwiZGVzY3JpcHRvciIsImF0dGFjaCIsInZhbHVlIiwiYXR0YWNoUmVjdXJzaXZlbHkiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIm5hbWUiLCJyb3V0ZXIiLCJoYW5kbGVyIiwiaGFuZGxlcnMiLCJzdGFja2lmeSIsInVuc2hpZnQiLCJzdGFjayJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFHZ0JBLEcsR0FBQUEsRztBQUFULFNBQVNBLEdBQVQsQ0FBYUMsVUFBYixFQUFnRDtBQUNyRCxNQUFJLE9BQU9BLFVBQVAsS0FBc0IsVUFBMUIsRUFBc0M7QUFDcEMsVUFBTSxJQUFJQyxTQUFKLENBQWMsNkJBQWQsQ0FBTjtBQUNEOztBQUVELE1BQUlELFdBQVdFLE1BQVgsS0FBc0IsQ0FBMUIsRUFBNkI7QUFDM0IsVUFBTSxJQUFJRCxTQUFKLENBQWMseUNBQWQsQ0FBTjtBQUNEOztBQUVELFFBQU1FLEtBQUssQ0FBQ0MsTUFBRCxFQUFpQkMsR0FBakIsRUFBK0JDLFVBQS9CLEtBQTJEO0FBQ3BFLFFBQUlBLFVBQUosRUFBZ0I7QUFDZEMsYUFBT0QsV0FBV0UsS0FBbEIsRUFBeUJSLFVBQXpCO0FBQ0QsS0FGRCxNQUVPO0FBQ0xTLHdCQUFrQkwsT0FBT00sU0FBekIsRUFBb0NWLFVBQXBDO0FBQ0Q7QUFDRixHQU5EOztBQVFBVyxTQUFPQyxjQUFQLENBQXNCVCxFQUF0QixFQUEwQixNQUExQixFQUFrQyxFQUFDSyxPQUFPUixXQUFXYSxJQUFuQixFQUFsQztBQUNBLFNBQU9WLEVBQVA7QUFDRDs7O0FBRUQsU0FBU00saUJBQVQsQ0FBMkJMLE1BQTNCLEVBQTJDSixVQUEzQyxFQUFtRTtBQUNqRSxNQUFJSSxPQUFPVSxNQUFYLEVBQW1CO0FBQ2pCLFNBQUssTUFBTUMsT0FBWCxJQUFzQlgsT0FBT1UsTUFBUCxDQUFjRSxRQUFwQyxFQUE4QztBQUM1Q1QsYUFBT1EsT0FBUCxFQUFnQmYsVUFBaEI7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsU0FBU08sTUFBVCxDQUFnQlEsT0FBaEIsRUFBZ0NmLFVBQWhDLEVBQXdEO0FBQ3RELE1BQUksT0FBT2UsT0FBUCxLQUFtQixVQUF2QixFQUFtQztBQUNqQ0UsYUFBU0YsT0FBVCxFQUFrQkcsT0FBbEIsQ0FBMEJsQixVQUExQjtBQUNELEdBRkQsTUFFTztBQUNMLFVBQU0sSUFBSUMsU0FBSixDQUFjLHNDQUFkLENBQU47QUFDRDtBQUNGOztBQUVELFNBQVNnQixRQUFULENBQWtCYixNQUFsQixFQUFvQztBQUNsQyxNQUFJLENBQUNBLE9BQU9lLEtBQVosRUFBbUI7QUFDakJSLFdBQU9DLGNBQVAsQ0FBc0JSLE1BQXRCLEVBQThCLE9BQTlCLEVBQXVDO0FBQ3JDSSxhQUFPO0FBRDhCLEtBQXZDO0FBR0Q7O0FBRUQsU0FBT0osT0FBT2UsS0FBZDtBQUNEIiwiZmlsZSI6InVzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5pbXBvcnQgdHlwZSB7TWlkZGxld2FyZX0gZnJvbSBcIi4uL21pZGRsZXdhcmVcIlxuXG5leHBvcnQgZnVuY3Rpb24gdXNlKG1pZGRsZXdhcmU6IE1pZGRsZXdhcmUpOiBEZWNvcmF0b3Ige1xuICBpZiAodHlwZW9mIG1pZGRsZXdhcmUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJNaWRkbGV3YXJlIG11c3QgYmUgZnVuY3Rpb25cIilcbiAgfVxuXG4gIGlmIChtaWRkbGV3YXJlLmxlbmd0aCAhPT0gMSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJNaWRkbGV3YXJlIG11c3QgdGFrZSBleGFjdGx5IDEgYXJndW1lbnRcIilcbiAgfVxuXG4gIGNvbnN0IGZuID0gKG9iamVjdDogT2JqZWN0LCBrZXk6ID9zdHJpbmcsIGRlc2NyaXB0b3I6ID9EZXNjcmlwdG9yKSA9PiB7XG4gICAgaWYgKGRlc2NyaXB0b3IpIHtcbiAgICAgIGF0dGFjaChkZXNjcmlwdG9yLnZhbHVlLCBtaWRkbGV3YXJlKVxuICAgIH0gZWxzZSB7XG4gICAgICBhdHRhY2hSZWN1cnNpdmVseShvYmplY3QucHJvdG90eXBlLCBtaWRkbGV3YXJlKVxuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgXCJuYW1lXCIsIHt2YWx1ZTogbWlkZGxld2FyZS5uYW1lfSlcbiAgcmV0dXJuIGZuXG59XG5cbmZ1bmN0aW9uIGF0dGFjaFJlY3Vyc2l2ZWx5KG9iamVjdDogT2JqZWN0LCBtaWRkbGV3YXJlOiBNaWRkbGV3YXJlKSB7XG4gIGlmIChvYmplY3Qucm91dGVyKSB7XG4gICAgZm9yIChjb25zdCBoYW5kbGVyIG9mIG9iamVjdC5yb3V0ZXIuaGFuZGxlcnMpIHtcbiAgICAgIGF0dGFjaChoYW5kbGVyLCBtaWRkbGV3YXJlKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhdHRhY2goaGFuZGxlcjogbWl4ZWQsIG1pZGRsZXdhcmU6IE1pZGRsZXdhcmUpIHtcbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBzdGFja2lmeShoYW5kbGVyKS51bnNoaWZ0KG1pZGRsZXdhcmUpXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIGRlc2NyaXB0b3IgdG8gYmUgYSBmdW5jdGlvblwiKVxuICB9XG59XG5cbmZ1bmN0aW9uIHN0YWNraWZ5KG9iamVjdDogRnVuY3Rpb24pIHtcbiAgaWYgKCFvYmplY3Quc3RhY2spIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBcInN0YWNrXCIsIHtcbiAgICAgIHZhbHVlOiBbXSxcbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIG9iamVjdC5zdGFja1xufVxuIl19