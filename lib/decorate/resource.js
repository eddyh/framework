"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resource = resource;

var _route = require("./route");

function resource({ singular } = { singular: false }) {
  const single = [["show", "GET", "/"], ["create", "POST", "/"], ["create", "PUT", "/"], ["update", "PATCH", "/"], ["destroy", "DELETE", "/"], ["new", "GET", "/new"], ["edit", "GET", "/edit"]];

  const plural = [["index", "GET", "/"], ["show", "GET", "/{id}"], ["create", "POST", "/"], ["create", "PUT", "/"], ["update", "PATCH", "/{id}"], ["destroy", "DELETE", "/{id}"], ["new", "GET", "/new"], ["edit", "GET", "/{id}/edit"]];

  const map = singular ? single : plural;

  return object => {
    for (const [name, method, pattern] of map) {
      let descriptor = Object.getOwnPropertyDescriptor(object.prototype, name);
      if (descriptor) {
        const decorate = (0, _route.route)(pattern, { method });
        descriptor = decorate(object.prototype, name, descriptor);
        if (descriptor) {
          Object.defineProperty(object.prototype, name, descriptor);
        }
      }
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kZWNvcmF0ZS9yZXNvdXJjZS5qcyJdLCJuYW1lcyI6WyJyZXNvdXJjZSIsInNpbmd1bGFyIiwic2luZ2xlIiwicGx1cmFsIiwibWFwIiwib2JqZWN0IiwibmFtZSIsIm1ldGhvZCIsInBhdHRlcm4iLCJkZXNjcmlwdG9yIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwicHJvdG90eXBlIiwiZGVjb3JhdGUiLCJkZWZpbmVQcm9wZXJ0eSJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFPZ0JBLFEsR0FBQUEsUTs7QUFOaEI7O0FBTU8sU0FBU0EsUUFBVCxDQUFrQixFQUFDQyxRQUFELEtBQThCLEVBQUNBLFVBQVUsS0FBWCxFQUFoRCxFQUE4RTtBQUNuRixRQUFNQyxTQUFTLENBQ2IsQ0FBQyxNQUFELEVBQVMsS0FBVCxFQUFnQixHQUFoQixDQURhLEVBRWIsQ0FBQyxRQUFELEVBQVcsTUFBWCxFQUFtQixHQUFuQixDQUZhLEVBR2IsQ0FBQyxRQUFELEVBQVcsS0FBWCxFQUFrQixHQUFsQixDQUhhLEVBSWIsQ0FBQyxRQUFELEVBQVcsT0FBWCxFQUFvQixHQUFwQixDQUphLEVBS2IsQ0FBQyxTQUFELEVBQVksUUFBWixFQUFzQixHQUF0QixDQUxhLEVBT2IsQ0FBQyxLQUFELEVBQVEsS0FBUixFQUFlLE1BQWYsQ0FQYSxFQVFiLENBQUMsTUFBRCxFQUFTLEtBQVQsRUFBZ0IsT0FBaEIsQ0FSYSxDQUFmOztBQVdBLFFBQU1DLFNBQVMsQ0FDYixDQUFDLE9BQUQsRUFBVSxLQUFWLEVBQWlCLEdBQWpCLENBRGEsRUFFYixDQUFDLE1BQUQsRUFBUyxLQUFULEVBQWdCLE9BQWhCLENBRmEsRUFHYixDQUFDLFFBQUQsRUFBVyxNQUFYLEVBQW1CLEdBQW5CLENBSGEsRUFJYixDQUFDLFFBQUQsRUFBVyxLQUFYLEVBQWtCLEdBQWxCLENBSmEsRUFLYixDQUFDLFFBQUQsRUFBVyxPQUFYLEVBQW9CLE9BQXBCLENBTGEsRUFNYixDQUFDLFNBQUQsRUFBWSxRQUFaLEVBQXNCLE9BQXRCLENBTmEsRUFRYixDQUFDLEtBQUQsRUFBUSxLQUFSLEVBQWUsTUFBZixDQVJhLEVBU2IsQ0FBQyxNQUFELEVBQVMsS0FBVCxFQUFnQixZQUFoQixDQVRhLENBQWY7O0FBWUEsUUFBTUMsTUFBTUgsV0FBV0MsTUFBWCxHQUFvQkMsTUFBaEM7O0FBRUEsU0FBUUUsTUFBRCxJQUFvQjtBQUN6QixTQUFLLE1BQU0sQ0FBQ0MsSUFBRCxFQUFPQyxNQUFQLEVBQWVDLE9BQWYsQ0FBWCxJQUFzQ0osR0FBdEMsRUFBMkM7QUFDekMsVUFBSUssYUFBYUMsT0FBT0Msd0JBQVAsQ0FBZ0NOLE9BQU9PLFNBQXZDLEVBQWtETixJQUFsRCxDQUFqQjtBQUNBLFVBQUlHLFVBQUosRUFBZ0I7QUFDZCxjQUFNSSxXQUFXLGtCQUFNTCxPQUFOLEVBQWUsRUFBQ0QsTUFBRCxFQUFmLENBQWpCO0FBQ0FFLHFCQUFhSSxTQUFTUixPQUFPTyxTQUFoQixFQUEyQk4sSUFBM0IsRUFBaUNHLFVBQWpDLENBQWI7QUFDQSxZQUFJQSxVQUFKLEVBQWdCO0FBQ2RDLGlCQUFPSSxjQUFQLENBQXNCVCxPQUFPTyxTQUE3QixFQUF3Q04sSUFBeEMsRUFBOENHLFVBQTlDO0FBQ0Q7QUFDRjtBQUNGO0FBQ0YsR0FYRDtBQVlEIiwiZmlsZSI6InJlc291cmNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cbmltcG9ydCB7cm91dGV9IGZyb20gXCIuL3JvdXRlXCJcblxuZXhwb3J0IHR5cGUgUmVzb3VyY2VPcHRpb25zID0ge3xcbiAgc2luZ3VsYXI6IGJvb2xlYW4sXG58fVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzb3VyY2Uoe3Npbmd1bGFyfTogUmVzb3VyY2VPcHRpb25zID0ge3Npbmd1bGFyOiBmYWxzZX0pOiBEZWNvcmF0b3Ige1xuICBjb25zdCBzaW5nbGUgPSBbXG4gICAgW1wic2hvd1wiLCBcIkdFVFwiLCBcIi9cIl0sXG4gICAgW1wiY3JlYXRlXCIsIFwiUE9TVFwiLCBcIi9cIl0sXG4gICAgW1wiY3JlYXRlXCIsIFwiUFVUXCIsIFwiL1wiXSxcbiAgICBbXCJ1cGRhdGVcIiwgXCJQQVRDSFwiLCBcIi9cIl0sXG4gICAgW1wiZGVzdHJveVwiLCBcIkRFTEVURVwiLCBcIi9cIl0sXG5cbiAgICBbXCJuZXdcIiwgXCJHRVRcIiwgXCIvbmV3XCJdLFxuICAgIFtcImVkaXRcIiwgXCJHRVRcIiwgXCIvZWRpdFwiXSxcbiAgXVxuXG4gIGNvbnN0IHBsdXJhbCA9IFtcbiAgICBbXCJpbmRleFwiLCBcIkdFVFwiLCBcIi9cIl0sXG4gICAgW1wic2hvd1wiLCBcIkdFVFwiLCBcIi97aWR9XCJdLFxuICAgIFtcImNyZWF0ZVwiLCBcIlBPU1RcIiwgXCIvXCJdLFxuICAgIFtcImNyZWF0ZVwiLCBcIlBVVFwiLCBcIi9cIl0sXG4gICAgW1widXBkYXRlXCIsIFwiUEFUQ0hcIiwgXCIve2lkfVwiXSxcbiAgICBbXCJkZXN0cm95XCIsIFwiREVMRVRFXCIsIFwiL3tpZH1cIl0sXG5cbiAgICBbXCJuZXdcIiwgXCJHRVRcIiwgXCIvbmV3XCJdLFxuICAgIFtcImVkaXRcIiwgXCJHRVRcIiwgXCIve2lkfS9lZGl0XCJdLFxuICBdXG5cbiAgY29uc3QgbWFwID0gc2luZ3VsYXIgPyBzaW5nbGUgOiBwbHVyYWxcblxuICByZXR1cm4gKG9iamVjdDogT2JqZWN0KSA9PiB7XG4gICAgZm9yIChjb25zdCBbbmFtZSwgbWV0aG9kLCBwYXR0ZXJuXSBvZiBtYXApIHtcbiAgICAgIGxldCBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QucHJvdG90eXBlLCBuYW1lKVxuICAgICAgaWYgKGRlc2NyaXB0b3IpIHtcbiAgICAgICAgY29uc3QgZGVjb3JhdGUgPSByb3V0ZShwYXR0ZXJuLCB7bWV0aG9kfSlcbiAgICAgICAgZGVzY3JpcHRvciA9IGRlY29yYXRlKG9iamVjdC5wcm90b3R5cGUsIG5hbWUsIGRlc2NyaXB0b3IpXG4gICAgICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdC5wcm90b3R5cGUsIG5hbWUsIGRlc2NyaXB0b3IpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==