"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
let HttpError = class HttpError extends Error {

  constructor(message) {
    super();

    /* Error message without trailing period. */
    this.expose = true;
    if (message == null) {
      this.message = "Unknown reason";
    } else {
      this.message = message.replace(/\.?$/, "");
    }

    Error.captureStackTrace(this, this.constructor);
    Object.freeze(this.stack);
  }

  toJSON() {
    return { error: this.error, message: this.message };
  }

  toString() {
    return `${this.status} ${this.message}`;
  }
};


function defineError(status, error) {
  return class extends HttpError {

    constructor(message = error) {
      super(message);
      this.status = status;
      this.error = error;
    }
  };
}

/* https://github.com/nodejs/node/blob/master/lib/_http_server.js */
const BadRequest = exports.BadRequest = defineError(400, "Bad request");
const Unauthorized = exports.Unauthorized = defineError(401, "Unauthorized");
const PaymentRequired = exports.PaymentRequired = defineError(402, "Payment required");
const Forbidden = exports.Forbidden = defineError(403, "Forbidden");
const NotFound = exports.NotFound = defineError(404, "Not found");
const MethodNotAllowed = exports.MethodNotAllowed = defineError(405, "Method not allowed");
const NotAcceptable = exports.NotAcceptable = defineError(406, "Not acceptable");
const ProxyAuthenticationRequired = exports.ProxyAuthenticationRequired = defineError(407, "Proxy authentication required");
const RequestTimeout = exports.RequestTimeout = defineError(408, "Request timeout");
const Conflict = exports.Conflict = defineError(409, "Conflict");
const Gone = exports.Gone = defineError(410, "Gone");
const LengthRequired = exports.LengthRequired = defineError(411, "Length required");
const PreconditionFailed = exports.PreconditionFailed = defineError(412, "Precondition failed");
const RequestEntityTooLarge = exports.RequestEntityTooLarge = defineError(413, "Request entity too large");
const RequestURITooLong = exports.RequestURITooLong = defineError(414, "Request URI too long");
const UnsupportedMediaType = exports.UnsupportedMediaType = defineError(415, "Unsupported media type");
const RangeNotSatisfiable = exports.RangeNotSatisfiable = defineError(416, "Range not satisfiable");
const ExpectationFailed = exports.ExpectationFailed = defineError(417, "Expectation failed");
const ImATeapot = exports.ImATeapot = defineError(418, "I'm a teapot");
const MisdirectedRequest = exports.MisdirectedRequest = defineError(421, "Misdirected request");
const UnprocessableEntity = exports.UnprocessableEntity = defineError(422, "Unprocessable entity");
const Locked = exports.Locked = defineError(423, "Locked");
const FailedDependency = exports.FailedDependency = defineError(424, "Failed dependency");
const UpgradeRequired = exports.UpgradeRequired = defineError(426, "Upgrade required");
const PreconditionRequired = exports.PreconditionRequired = defineError(428, "Precondition required");
const TooManyRequests = exports.TooManyRequests = defineError(429, "Too many requests");
const RequestHeaderFieldsTooLarge = exports.RequestHeaderFieldsTooLarge = defineError(431, "Request header fields too large");
const UnavailableForLegalReasons = exports.UnavailableForLegalReasons = defineError(451, "Unavailable for legal reasons");

const InternalServerError = exports.InternalServerError = defineError(500, "Internal server error");
const NotImplemented = exports.NotImplemented = defineError(501, "Not implemented");
const BadGateway = exports.BadGateway = defineError(502, "Bad gateway");
const ServiceUnavailable = exports.ServiceUnavailable = defineError(503, "Service unavailable");
const GatewayTimeout = exports.GatewayTimeout = defineError(504, "Gateway timeout");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,