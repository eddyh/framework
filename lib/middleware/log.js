"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = log;

var _http = require("http");

var _http2 = _interopRequireDefault(_http);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const statusCodes = new Map();
/* eslint-disable dot-notation */
/* eslint-disable no-unused-expressions */

for (const code in _http2.default.STATUS_CODES) {
  const number = parseInt(code);
  statusCodes.set(number, _http2.default.STATUS_CODES[number].toLowerCase());
}

function log(logger) {
  return function log(next) {
    this;

    const socket = this.request.socket;

    /* Check what has been previously recorded as read/written on this socket.
       The request may not be the first over this socket. */
    const bytesReadPreviously = socket.bytesReadPreviously || 0;
    const bytesWrittenPreviously = socket.bytesWrittenPreviously || 0;

    const startTime = process.hrtime();

    this.data.log = Object.create(null);

    this.response.on("finish", () => {
      /* Store current read/written count for future reference. */
      socket.bytesReadPreviously = socket.bytesRead;
      socket.bytesWrittenPreviously = socket.bytesWritten;

      const requestMethod = this.method;
      const requestUrl = this.url;
      const requestSize = socket.bytesRead - bytesReadPreviously;

      const status = this.response.statusCode;
      const responseSize = socket.bytesWritten - bytesWrittenPreviously;

      const userAgent = this.get("user-agent");
      const referer = this.get("referer");

      const [sec, nano] = process.hrtime(startTime);
      const latency = `${(sec + 1e-9 * nano).toFixed(3)}s`;

      let remoteIp = socket.remoteAddress;
      const forwarded = this.get("x-forwarded-for");
      if (forwarded) {
        remoteIp = forwarded.split(",").shift();
      }

      const httpRequest = {
        requestMethod,
        requestUrl,
        requestSize,
        status,
        responseSize,
        userAgent,
        remoteIp,
        referer,
        latency
        // protocol, TODO
      };

      const logContext = Object.assign({}, this.data.log, { httpRequest });

      if (status >= 500 && this.data.error) {
        /* An error was thrown somewhere. */
        if (this.data.error.expose) {
          /* This error is exposable, so it is to be expected. */
          logger.warning(this.data.error.message || "(no message)", logContext);
        } else {
          /* This was an internal error, not supposed to be exposed. Log the
             entire stack trace so we can debug later. */
          logger.error(this.data.error.stack || this.data.error.toString(), logContext);
        }
      } else {
        /* No error was thrown, or error was in 4xx range. */
        if (isHealthCheck(httpRequest)) {
          logger.debug(statusCodes.get(status), logContext);
        } else {
          logger.info(statusCodes.get(status), logContext);
        }
      }
    });

    return next();
  };
}

const healthCheckTokens = new Set(["GoogleHC", "ELB-HealthChecker", "kube-probe"]);

function isHealthCheck({ userAgent }) {
  if (!userAgent) return false;
  return healthCheckTokens.has(userAgent.split("/")[0]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,