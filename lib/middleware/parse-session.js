"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseSession;

var _cookies = require("cookies");

var _cookies2 = _interopRequireDefault(_cookies);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-unused-expressions */
function decode(string) {
  const body = Buffer.from(string, "base64").toString("utf8");
  return JSON.parse(body);
}

function encode(body) {
  const string = JSON.stringify(body);
  return Buffer.from(string).toString("base64");
}

const day = 24 * 60 * 60 * 1000;

function parseSession({ name = "sess", keys, maxAge = 90 * day } = {}) {
  return async function parseSession(next) {
    this;

    let session, cookie;
    const socket = this.request.socket;
    const secure = socket.encrypted || this.request.headers["x-forwarded-proto"] === "https";
    const cookies = new _cookies2.default(this.request, this.response, { keys, secure });

    /* https://github.com/facebook/flow/issues/285 */
    Object.defineProperty(this.data, "session", {
      get: () => {
        if (session !== undefined) return session;

        cookie = cookies.get(name, { maxAge });
        if (cookie) {
          try {
            session = decode(cookie);
          } catch (err) {
            session = {};
          }
        } else {
          session = {};
        }

        return session;
      },

      set: value => {
        if (typeof value !== "object") {
          throw new TypeError("Session must be an object");
        }

        if (cookie === undefined) {
          cookie = cookies.get(name, { maxAge });
        }

        session = value;
      }
    });

    try {
      await next();
    } finally {
      if (session === undefined) {
        /* Session not used. */
      } else if (session && Object.keys(session).length) {
        const encoded = encode(session);
        if (encoded !== cookie) {
          /* Only set session if it has changed. */
          cookies.set(name, encoded, { maxAge });
        }
      } else if (cookies.get(name, { signed: false })) {
        /* Session cookies were invalid. Clear session & signature. */
        cookies.set(name, null, { signed: false });
        cookies.set(name + ".sig", null, { signed: false });
      }
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlL3BhcnNlLXNlc3Npb24uanMiXSwibmFtZXMiOlsicGFyc2VTZXNzaW9uIiwiZGVjb2RlIiwic3RyaW5nIiwiYm9keSIsIkJ1ZmZlciIsImZyb20iLCJ0b1N0cmluZyIsIkpTT04iLCJwYXJzZSIsImVuY29kZSIsInN0cmluZ2lmeSIsImRheSIsIm5hbWUiLCJrZXlzIiwibWF4QWdlIiwibmV4dCIsInNlc3Npb24iLCJjb29raWUiLCJzb2NrZXQiLCJyZXF1ZXN0Iiwic2VjdXJlIiwiZW5jcnlwdGVkIiwiaGVhZGVycyIsImNvb2tpZXMiLCJDb29raWVzIiwicmVzcG9uc2UiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImRhdGEiLCJnZXQiLCJ1bmRlZmluZWQiLCJlcnIiLCJzZXQiLCJ2YWx1ZSIsIlR5cGVFcnJvciIsImxlbmd0aCIsImVuY29kZWQiLCJzaWduZWQiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQXdCd0JBLFk7O0FBcEJ4Qjs7Ozs7O0FBSEE7QUFXQSxTQUFTQyxNQUFULENBQWdCQyxNQUFoQixFQUF3QjtBQUN0QixRQUFNQyxPQUFPQyxPQUFPQyxJQUFQLENBQVlILE1BQVosRUFBb0IsUUFBcEIsRUFBOEJJLFFBQTlCLENBQXVDLE1BQXZDLENBQWI7QUFDQSxTQUFPQyxLQUFLQyxLQUFMLENBQVdMLElBQVgsQ0FBUDtBQUNEOztBQUVELFNBQVNNLE1BQVQsQ0FBZ0JOLElBQWhCLEVBQXNCO0FBQ3BCLFFBQU1ELFNBQVNLLEtBQUtHLFNBQUwsQ0FBZVAsSUFBZixDQUFmO0FBQ0EsU0FBT0MsT0FBT0MsSUFBUCxDQUFZSCxNQUFaLEVBQW9CSSxRQUFwQixDQUE2QixRQUE3QixDQUFQO0FBQ0Q7O0FBRUQsTUFBTUssTUFBTSxLQUFLLEVBQUwsR0FBVSxFQUFWLEdBQWUsSUFBM0I7O0FBRWUsU0FBU1gsWUFBVCxDQUFzQixFQUFDWSxPQUFPLE1BQVIsRUFBZ0JDLElBQWhCLEVBQXNCQyxTQUFTLEtBQUtILEdBQXBDLEtBQTJELEVBQWpGLEVBQWlHO0FBQzlHLFNBQU8sZUFBZVgsWUFBZixDQUE0QmUsSUFBNUIsRUFBd0M7QUFDNUMsUUFBRDs7QUFFQSxRQUFJQyxPQUFKLEVBQWFDLE1BQWI7QUFDQSxVQUFNQyxTQUFxQyxLQUFLQyxPQUFMLENBQWFELE1BQXhEO0FBQ0EsVUFBTUUsU0FBU0YsT0FBT0csU0FBUCxJQUFvQixLQUFLRixPQUFMLENBQWFHLE9BQWIsQ0FBcUIsbUJBQXJCLE1BQThDLE9BQWpGO0FBQ0EsVUFBTUMsVUFBVSxJQUFJQyxpQkFBSixDQUFZLEtBQUtMLE9BQWpCLEVBQTBCLEtBQUtNLFFBQS9CLEVBQXlDLEVBQUNaLElBQUQsRUFBT08sTUFBUCxFQUF6QyxDQUFoQjs7QUFFQTtBQUNBTSxXQUFPQyxjQUFQLENBQXNCLEtBQUtDLElBQTNCLEVBQWlDLFNBQWpDLEVBQTZDO0FBQzNDQyxXQUFLLE1BQU07QUFDVCxZQUFJYixZQUFZYyxTQUFoQixFQUEyQixPQUFPZCxPQUFQOztBQUUzQkMsaUJBQVNNLFFBQVFNLEdBQVIsQ0FBWWpCLElBQVosRUFBa0IsRUFBQ0UsTUFBRCxFQUFsQixDQUFUO0FBQ0EsWUFBSUcsTUFBSixFQUFZO0FBQ1YsY0FBSTtBQUNGRCxzQkFBVWYsT0FBT2dCLE1BQVAsQ0FBVjtBQUNELFdBRkQsQ0FFRSxPQUFPYyxHQUFQLEVBQVk7QUFDWmYsc0JBQVUsRUFBVjtBQUNEO0FBQ0YsU0FORCxNQU1PO0FBQ0xBLG9CQUFVLEVBQVY7QUFDRDs7QUFFRCxlQUFPQSxPQUFQO0FBQ0QsT0FoQjBDOztBQWtCM0NnQixXQUFLQyxTQUFTO0FBQ1osWUFBSSxPQUFPQSxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzdCLGdCQUFNLElBQUlDLFNBQUosQ0FBYywyQkFBZCxDQUFOO0FBQ0Q7O0FBRUQsWUFBSWpCLFdBQVdhLFNBQWYsRUFBMEI7QUFDeEJiLG1CQUFTTSxRQUFRTSxHQUFSLENBQVlqQixJQUFaLEVBQWtCLEVBQUNFLE1BQUQsRUFBbEIsQ0FBVDtBQUNEOztBQUVERSxrQkFBVWlCLEtBQVY7QUFDRDtBQTVCMEMsS0FBN0M7O0FBK0JBLFFBQUk7QUFDRixZQUFNbEIsTUFBTjtBQUNELEtBRkQsU0FFVTtBQUNSLFVBQUlDLFlBQVljLFNBQWhCLEVBQTJCO0FBQ3pCO0FBQ0QsT0FGRCxNQUVPLElBQUlkLFdBQVdVLE9BQU9iLElBQVAsQ0FBWUcsT0FBWixFQUFxQm1CLE1BQXBDLEVBQTRDO0FBQ2pELGNBQU1DLFVBQVUzQixPQUFPTyxPQUFQLENBQWhCO0FBQ0EsWUFBSW9CLFlBQVluQixNQUFoQixFQUF3QjtBQUN0QjtBQUNBTSxrQkFBUVMsR0FBUixDQUFZcEIsSUFBWixFQUFrQndCLE9BQWxCLEVBQTJCLEVBQUN0QixNQUFELEVBQTNCO0FBQ0Q7QUFDRixPQU5NLE1BTUEsSUFBSVMsUUFBUU0sR0FBUixDQUFZakIsSUFBWixFQUFrQixFQUFDeUIsUUFBUSxLQUFULEVBQWxCLENBQUosRUFBd0M7QUFDN0M7QUFDQWQsZ0JBQVFTLEdBQVIsQ0FBWXBCLElBQVosRUFBa0IsSUFBbEIsRUFBd0IsRUFBQ3lCLFFBQVEsS0FBVCxFQUF4QjtBQUNBZCxnQkFBUVMsR0FBUixDQUFZcEIsT0FBTyxNQUFuQixFQUEyQixJQUEzQixFQUFpQyxFQUFDeUIsUUFBUSxLQUFULEVBQWpDO0FBQ0Q7QUFDRjtBQUNGLEdBekREO0FBMEREIiwiZmlsZSI6InBhcnNlLXNlc3Npb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG5pbXBvcnQgdHlwZSB7Q29udGV4dCwgTmV4dCwgTWlkZGxld2FyZX0gZnJvbSBcIi4uL21pZGRsZXdhcmVcIlxuXG5pbXBvcnQgQ29va2llcyBmcm9tIFwiY29va2llc1wiXG5cbnR5cGUgU2Vzc2lvbk9wdGlvbnMgPSB7XG4gIG5hbWU/OiBzdHJpbmcsXG4gIGtleXM/OiBBcnJheTxzdHJpbmc+LFxuICBtYXhBZ2U/OiBudW1iZXIsXG59XG5cbmZ1bmN0aW9uIGRlY29kZShzdHJpbmcpIHtcbiAgY29uc3QgYm9keSA9IEJ1ZmZlci5mcm9tKHN0cmluZywgXCJiYXNlNjRcIikudG9TdHJpbmcoXCJ1dGY4XCIpXG4gIHJldHVybiBKU09OLnBhcnNlKGJvZHkpXG59XG5cbmZ1bmN0aW9uIGVuY29kZShib2R5KSB7XG4gIGNvbnN0IHN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGJvZHkpXG4gIHJldHVybiBCdWZmZXIuZnJvbShzdHJpbmcpLnRvU3RyaW5nKFwiYmFzZTY0XCIpXG59XG5cbmNvbnN0IGRheSA9IDI0ICogNjAgKiA2MCAqIDEwMDBcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2VTZXNzaW9uKHtuYW1lID0gXCJzZXNzXCIsIGtleXMsIG1heEFnZSA9IDkwICogZGF5fTogU2Vzc2lvbk9wdGlvbnMgPSB7fSk6IE1pZGRsZXdhcmUge1xuICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gcGFyc2VTZXNzaW9uKG5leHQ6IE5leHQpIHtcbiAgICAodGhpczogQ29udGV4dClcblxuICAgIGxldCBzZXNzaW9uLCBjb29raWVcbiAgICBjb25zdCBzb2NrZXQ6IHRscyRUTFNTb2NrZXQgfCBuZXQkU29ja2V0ID0gdGhpcy5yZXF1ZXN0LnNvY2tldFxuICAgIGNvbnN0IHNlY3VyZSA9IHNvY2tldC5lbmNyeXB0ZWQgfHwgdGhpcy5yZXF1ZXN0LmhlYWRlcnNbXCJ4LWZvcndhcmRlZC1wcm90b1wiXSA9PT0gXCJodHRwc1wiXG4gICAgY29uc3QgY29va2llcyA9IG5ldyBDb29raWVzKHRoaXMucmVxdWVzdCwgdGhpcy5yZXNwb25zZSwge2tleXMsIHNlY3VyZX0pXG5cbiAgICAvKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjg1ICovXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuZGF0YSwgXCJzZXNzaW9uXCIsICh7XG4gICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgaWYgKHNlc3Npb24gIT09IHVuZGVmaW5lZCkgcmV0dXJuIHNlc3Npb25cblxuICAgICAgICBjb29raWUgPSBjb29raWVzLmdldChuYW1lLCB7bWF4QWdlfSlcbiAgICAgICAgaWYgKGNvb2tpZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzZXNzaW9uID0gZGVjb2RlKGNvb2tpZSlcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHNlc3Npb24gPSB7fVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXNzaW9uID0ge31cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZXNzaW9uXG4gICAgICB9LFxuXG4gICAgICBzZXQ6IHZhbHVlID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTZXNzaW9uIG11c3QgYmUgYW4gb2JqZWN0XCIpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29va2llID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb29raWUgPSBjb29raWVzLmdldChuYW1lLCB7bWF4QWdlfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHNlc3Npb24gPSB2YWx1ZVxuICAgICAgfSxcbiAgICB9OiBPYmplY3QpKVxuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IG5leHQoKVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoc2Vzc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8qIFNlc3Npb24gbm90IHVzZWQuICovXG4gICAgICB9IGVsc2UgaWYgKHNlc3Npb24gJiYgT2JqZWN0LmtleXMoc2Vzc2lvbikubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGVuY29kZWQgPSBlbmNvZGUoc2Vzc2lvbilcbiAgICAgICAgaWYgKGVuY29kZWQgIT09IGNvb2tpZSkge1xuICAgICAgICAgIC8qIE9ubHkgc2V0IHNlc3Npb24gaWYgaXQgaGFzIGNoYW5nZWQuICovXG4gICAgICAgICAgY29va2llcy5zZXQobmFtZSwgZW5jb2RlZCwge21heEFnZX0pXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY29va2llcy5nZXQobmFtZSwge3NpZ25lZDogZmFsc2V9KSkge1xuICAgICAgICAvKiBTZXNzaW9uIGNvb2tpZXMgd2VyZSBpbnZhbGlkLiBDbGVhciBzZXNzaW9uICYgc2lnbmF0dXJlLiAqL1xuICAgICAgICBjb29raWVzLnNldChuYW1lLCBudWxsLCB7c2lnbmVkOiBmYWxzZX0pXG4gICAgICAgIGNvb2tpZXMuc2V0KG5hbWUgKyBcIi5zaWdcIiwgbnVsbCwge3NpZ25lZDogZmFsc2V9KVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19