"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseSession;

var _cookies = require("cookies");

var _cookies2 = _interopRequireDefault(_cookies);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-unused-expressions */
function decode(string) {
  const body = new Buffer(string, "base64").toString("utf8");
  return JSON.parse(body);
}

function encode(body) {
  const string = JSON.stringify(body);
  return new Buffer(string).toString("base64");
}

const day = 24 * 60 * 60 * 1000;

function parseSession({ name = "sess", keys, maxAge = 90 * day } = {}) {
  return async function parseSession(next) {
    this;

    let session, cookie;
    const socket = this.request.socket;
    const secure = socket.encrypted || this.request.headers["x-forwarded-proto"] === "https";
    const cookies = new _cookies2.default(this.request, this.response, { keys, secure });

    /* https://github.com/facebook/flow/issues/285 */
    Object.defineProperty(this.data, "session", {
      get: () => {
        if (session !== undefined) return session;

        cookie = cookies.get(name, { maxAge });
        if (cookie) {
          try {
            session = decode(cookie);
          } catch (err) {
            session = {};
          }
        } else {
          session = {};
        }

        return session;
      },

      set: value => {
        if (typeof value !== "object") {
          throw new TypeError("Session must be an object");
        }

        if (cookie === undefined) {
          cookie = cookies.get(name, { maxAge });
        }

        session = value;
      }
    });

    try {
      await next();
    } finally {
      if (session === undefined) {
        /* Session not used. */
      } else if (session && Object.keys(session).length) {
        const encoded = encode(session);
        if (encoded !== cookie) {
          /* Only set session if it has changed. */
          cookies.set(name, encoded, { maxAge });
        }
      } else if (cookies.get(name, { signed: false })) {
        /* Session cookies were invalid. Clear session & signature. */
        cookies.set(name, null, { signed: false });
        cookies.set(name + ".sig", null, { signed: false });
      }
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlL3BhcnNlLXNlc3Npb24uanMiXSwibmFtZXMiOlsicGFyc2VTZXNzaW9uIiwiZGVjb2RlIiwic3RyaW5nIiwiYm9keSIsIkJ1ZmZlciIsInRvU3RyaW5nIiwiSlNPTiIsInBhcnNlIiwiZW5jb2RlIiwic3RyaW5naWZ5IiwiZGF5IiwibmFtZSIsImtleXMiLCJtYXhBZ2UiLCJuZXh0Iiwic2Vzc2lvbiIsImNvb2tpZSIsInNvY2tldCIsInJlcXVlc3QiLCJzZWN1cmUiLCJlbmNyeXB0ZWQiLCJoZWFkZXJzIiwiY29va2llcyIsIkNvb2tpZXMiLCJyZXNwb25zZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZGF0YSIsImdldCIsInVuZGVmaW5lZCIsImVyciIsInNldCIsInZhbHVlIiwiVHlwZUVycm9yIiwibGVuZ3RoIiwiZW5jb2RlZCIsInNpZ25lZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBd0J3QkEsWTs7QUFwQnhCOzs7Ozs7QUFIQTtBQVdBLFNBQVNDLE1BQVQsQ0FBZ0JDLE1BQWhCLEVBQXdCO0FBQ3RCLFFBQU1DLE9BQU8sSUFBSUMsTUFBSixDQUFXRixNQUFYLEVBQW1CLFFBQW5CLEVBQTZCRyxRQUE3QixDQUFzQyxNQUF0QyxDQUFiO0FBQ0EsU0FBT0MsS0FBS0MsS0FBTCxDQUFXSixJQUFYLENBQVA7QUFDRDs7QUFFRCxTQUFTSyxNQUFULENBQWdCTCxJQUFoQixFQUFzQjtBQUNwQixRQUFNRCxTQUFTSSxLQUFLRyxTQUFMLENBQWVOLElBQWYsQ0FBZjtBQUNBLFNBQU8sSUFBSUMsTUFBSixDQUFXRixNQUFYLEVBQW1CRyxRQUFuQixDQUE0QixRQUE1QixDQUFQO0FBQ0Q7O0FBRUQsTUFBTUssTUFBTSxLQUFLLEVBQUwsR0FBVSxFQUFWLEdBQWUsSUFBM0I7O0FBRWUsU0FBU1YsWUFBVCxDQUFzQixFQUFDVyxPQUFPLE1BQVIsRUFBZ0JDLElBQWhCLEVBQXNCQyxTQUFTLEtBQUtILEdBQXBDLEtBQTJELEVBQWpGLEVBQWlHO0FBQzlHLFNBQU8sZUFBZVYsWUFBZixDQUE0QmMsSUFBNUIsRUFBd0M7QUFDNUMsUUFBRDs7QUFFQSxRQUFJQyxPQUFKLEVBQWFDLE1BQWI7QUFDQSxVQUFNQyxTQUFxQyxLQUFLQyxPQUFMLENBQWFELE1BQXhEO0FBQ0EsVUFBTUUsU0FBU0YsT0FBT0csU0FBUCxJQUFvQixLQUFLRixPQUFMLENBQWFHLE9BQWIsQ0FBcUIsbUJBQXJCLE1BQThDLE9BQWpGO0FBQ0EsVUFBTUMsVUFBVSxJQUFJQyxpQkFBSixDQUFZLEtBQUtMLE9BQWpCLEVBQTBCLEtBQUtNLFFBQS9CLEVBQXlDLEVBQUNaLElBQUQsRUFBT08sTUFBUCxFQUF6QyxDQUFoQjs7QUFFQTtBQUNBTSxXQUFPQyxjQUFQLENBQXNCLEtBQUtDLElBQTNCLEVBQWlDLFNBQWpDLEVBQTZDO0FBQzNDQyxXQUFLLE1BQU07QUFDVCxZQUFJYixZQUFZYyxTQUFoQixFQUEyQixPQUFPZCxPQUFQOztBQUUzQkMsaUJBQVNNLFFBQVFNLEdBQVIsQ0FBWWpCLElBQVosRUFBa0IsRUFBQ0UsTUFBRCxFQUFsQixDQUFUO0FBQ0EsWUFBSUcsTUFBSixFQUFZO0FBQ1YsY0FBSTtBQUNGRCxzQkFBVWQsT0FBT2UsTUFBUCxDQUFWO0FBQ0QsV0FGRCxDQUVFLE9BQU9jLEdBQVAsRUFBWTtBQUNaZixzQkFBVSxFQUFWO0FBQ0Q7QUFDRixTQU5ELE1BTU87QUFDTEEsb0JBQVUsRUFBVjtBQUNEOztBQUVELGVBQU9BLE9BQVA7QUFDRCxPQWhCMEM7O0FBa0IzQ2dCLFdBQUtDLFNBQVM7QUFDWixZQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDN0IsZ0JBQU0sSUFBSUMsU0FBSixDQUFjLDJCQUFkLENBQU47QUFDRDs7QUFFRCxZQUFJakIsV0FBV2EsU0FBZixFQUEwQjtBQUN4QmIsbUJBQVNNLFFBQVFNLEdBQVIsQ0FBWWpCLElBQVosRUFBa0IsRUFBQ0UsTUFBRCxFQUFsQixDQUFUO0FBQ0Q7O0FBRURFLGtCQUFVaUIsS0FBVjtBQUNEO0FBNUIwQyxLQUE3Qzs7QUErQkEsUUFBSTtBQUNGLFlBQU1sQixNQUFOO0FBQ0QsS0FGRCxTQUVVO0FBQ1IsVUFBSUMsWUFBWWMsU0FBaEIsRUFBMkI7QUFDekI7QUFDRCxPQUZELE1BRU8sSUFBSWQsV0FBV1UsT0FBT2IsSUFBUCxDQUFZRyxPQUFaLEVBQXFCbUIsTUFBcEMsRUFBNEM7QUFDakQsY0FBTUMsVUFBVTNCLE9BQU9PLE9BQVAsQ0FBaEI7QUFDQSxZQUFJb0IsWUFBWW5CLE1BQWhCLEVBQXdCO0FBQ3RCO0FBQ0FNLGtCQUFRUyxHQUFSLENBQVlwQixJQUFaLEVBQWtCd0IsT0FBbEIsRUFBMkIsRUFBQ3RCLE1BQUQsRUFBM0I7QUFDRDtBQUNGLE9BTk0sTUFNQSxJQUFJUyxRQUFRTSxHQUFSLENBQVlqQixJQUFaLEVBQWtCLEVBQUN5QixRQUFRLEtBQVQsRUFBbEIsQ0FBSixFQUF3QztBQUM3QztBQUNBZCxnQkFBUVMsR0FBUixDQUFZcEIsSUFBWixFQUFrQixJQUFsQixFQUF3QixFQUFDeUIsUUFBUSxLQUFULEVBQXhCO0FBQ0FkLGdCQUFRUyxHQUFSLENBQVlwQixPQUFPLE1BQW5CLEVBQTJCLElBQTNCLEVBQWlDLEVBQUN5QixRQUFRLEtBQVQsRUFBakM7QUFDRDtBQUNGO0FBQ0YsR0F6REQ7QUEwREQiLCJmaWxlIjoicGFyc2Utc2Vzc2lvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtZXhwcmVzc2lvbnMgKi9cbmltcG9ydCB0eXBlIHtDb250ZXh0LCBOZXh0LCBNaWRkbGV3YXJlfSBmcm9tIFwiLi4vbWlkZGxld2FyZVwiXG5cbmltcG9ydCBDb29raWVzIGZyb20gXCJjb29raWVzXCJcblxudHlwZSBTZXNzaW9uT3B0aW9ucyA9IHtcbiAgbmFtZT86IHN0cmluZyxcbiAga2V5cz86IEFycmF5PHN0cmluZz4sXG4gIG1heEFnZT86IG51bWJlcixcbn1cblxuZnVuY3Rpb24gZGVjb2RlKHN0cmluZykge1xuICBjb25zdCBib2R5ID0gbmV3IEJ1ZmZlcihzdHJpbmcsIFwiYmFzZTY0XCIpLnRvU3RyaW5nKFwidXRmOFwiKVxuICByZXR1cm4gSlNPTi5wYXJzZShib2R5KVxufVxuXG5mdW5jdGlvbiBlbmNvZGUoYm9keSkge1xuICBjb25zdCBzdHJpbmcgPSBKU09OLnN0cmluZ2lmeShib2R5KVxuICByZXR1cm4gbmV3IEJ1ZmZlcihzdHJpbmcpLnRvU3RyaW5nKFwiYmFzZTY0XCIpXG59XG5cbmNvbnN0IGRheSA9IDI0ICogNjAgKiA2MCAqIDEwMDBcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2VTZXNzaW9uKHtuYW1lID0gXCJzZXNzXCIsIGtleXMsIG1heEFnZSA9IDkwICogZGF5fTogU2Vzc2lvbk9wdGlvbnMgPSB7fSk6IE1pZGRsZXdhcmUge1xuICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gcGFyc2VTZXNzaW9uKG5leHQ6IE5leHQpIHtcbiAgICAodGhpczogQ29udGV4dClcblxuICAgIGxldCBzZXNzaW9uLCBjb29raWVcbiAgICBjb25zdCBzb2NrZXQ6IHRscyRUTFNTb2NrZXQgfCBuZXQkU29ja2V0ID0gdGhpcy5yZXF1ZXN0LnNvY2tldFxuICAgIGNvbnN0IHNlY3VyZSA9IHNvY2tldC5lbmNyeXB0ZWQgfHwgdGhpcy5yZXF1ZXN0LmhlYWRlcnNbXCJ4LWZvcndhcmRlZC1wcm90b1wiXSA9PT0gXCJodHRwc1wiXG4gICAgY29uc3QgY29va2llcyA9IG5ldyBDb29raWVzKHRoaXMucmVxdWVzdCwgdGhpcy5yZXNwb25zZSwge2tleXMsIHNlY3VyZX0pXG5cbiAgICAvKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjg1ICovXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuZGF0YSwgXCJzZXNzaW9uXCIsICh7XG4gICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgaWYgKHNlc3Npb24gIT09IHVuZGVmaW5lZCkgcmV0dXJuIHNlc3Npb25cblxuICAgICAgICBjb29raWUgPSBjb29raWVzLmdldChuYW1lLCB7bWF4QWdlfSlcbiAgICAgICAgaWYgKGNvb2tpZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzZXNzaW9uID0gZGVjb2RlKGNvb2tpZSlcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHNlc3Npb24gPSB7fVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXNzaW9uID0ge31cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZXNzaW9uXG4gICAgICB9LFxuXG4gICAgICBzZXQ6IHZhbHVlID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTZXNzaW9uIG11c3QgYmUgYW4gb2JqZWN0XCIpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29va2llID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb29raWUgPSBjb29raWVzLmdldChuYW1lLCB7bWF4QWdlfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHNlc3Npb24gPSB2YWx1ZVxuICAgICAgfSxcbiAgICB9OiBPYmplY3QpKVxuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IG5leHQoKVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoc2Vzc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8qIFNlc3Npb24gbm90IHVzZWQuICovXG4gICAgICB9IGVsc2UgaWYgKHNlc3Npb24gJiYgT2JqZWN0LmtleXMoc2Vzc2lvbikubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGVuY29kZWQgPSBlbmNvZGUoc2Vzc2lvbilcbiAgICAgICAgaWYgKGVuY29kZWQgIT09IGNvb2tpZSkge1xuICAgICAgICAgIC8qIE9ubHkgc2V0IHNlc3Npb24gaWYgaXQgaGFzIGNoYW5nZWQuICovXG4gICAgICAgICAgY29va2llcy5zZXQobmFtZSwgZW5jb2RlZCwge21heEFnZX0pXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY29va2llcy5nZXQobmFtZSwge3NpZ25lZDogZmFsc2V9KSkge1xuICAgICAgICAvKiBTZXNzaW9uIGNvb2tpZXMgd2VyZSBpbnZhbGlkLiBDbGVhciBzZXNzaW9uICYgc2lnbmF0dXJlLiAqL1xuICAgICAgICBjb29raWVzLnNldChuYW1lLCBudWxsLCB7c2lnbmVkOiBmYWxzZX0pXG4gICAgICAgIGNvb2tpZXMuc2V0KG5hbWUgKyBcIi5zaWdcIiwgbnVsbCwge3NpZ25lZDogZmFsc2V9KVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19