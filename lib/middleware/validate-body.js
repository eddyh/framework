"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = validateBody;

var _schemaValidator = require("../util/schema-validator");

var _errors = require("../errors");

/* eslint-disable no-unused-expressions */
function validateBody(options) {
  const validator = (0, _schemaValidator.createValidator)(options.schema);
  return function validateBody(next) {
    this;

    validate(validator, this.data.body, options);
    return next();
  };
}

function validate(validator, body, { message = "Request is invalid", details = true, optional = false }) {
  /* Don't validate non-JSON bodies if the request schema is optional. */
  if (body === undefined || Buffer.isBuffer(body)) {
    if (optional) return;

    /* Validate empty body. */
    body = {};
  }

  const errors = validator(body);
  if (errors.length) {
    if (details) {
      throw new _errors.BadRequest(`${message}: ${errors.join("; ")}`);
    } else {
      throw new _errors.BadRequest(message);
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlL3ZhbGlkYXRlLWJvZHkuanMiXSwibmFtZXMiOlsidmFsaWRhdGVCb2R5Iiwib3B0aW9ucyIsInZhbGlkYXRvciIsInNjaGVtYSIsIm5leHQiLCJ2YWxpZGF0ZSIsImRhdGEiLCJib2R5IiwibWVzc2FnZSIsImRldGFpbHMiLCJvcHRpb25hbCIsInVuZGVmaW5lZCIsIkJ1ZmZlciIsImlzQnVmZmVyIiwiZXJyb3JzIiwibGVuZ3RoIiwiQmFkUmVxdWVzdCIsImpvaW4iXSwibWFwcGluZ3MiOiI7Ozs7O2tCQWV3QkEsWTs7QUFieEI7O0FBRUE7O0FBSEE7QUFjZSxTQUFTQSxZQUFULENBQXNCQyxPQUF0QixFQUE4RDtBQUMzRSxRQUFNQyxZQUFZLHNDQUFnQkQsUUFBUUUsTUFBeEIsQ0FBbEI7QUFDQSxTQUFPLFNBQVNILFlBQVQsQ0FBc0JJLElBQXRCLEVBQWtDO0FBQ3RDLFFBQUQ7O0FBRUFDLGFBQVNILFNBQVQsRUFBb0IsS0FBS0ksSUFBTCxDQUFVQyxJQUE5QixFQUFvQ04sT0FBcEM7QUFDQSxXQUFPRyxNQUFQO0FBQ0QsR0FMRDtBQU1EOztBQUVELFNBQVNDLFFBQVQsQ0FBa0JILFNBQWxCLEVBQTZCSyxJQUE3QixFQUFtQyxFQUFDQyxVQUFVLG9CQUFYLEVBQWlDQyxVQUFVLElBQTNDLEVBQWlEQyxXQUFXLEtBQTVELEVBQW5DLEVBQXVHO0FBQ3JHO0FBQ0EsTUFBSUgsU0FBU0ksU0FBVCxJQUFzQkMsT0FBT0MsUUFBUCxDQUFnQk4sSUFBaEIsQ0FBMUIsRUFBaUQ7QUFDL0MsUUFBSUcsUUFBSixFQUFjOztBQUVkO0FBQ0FILFdBQU8sRUFBUDtBQUNEOztBQUVELFFBQU1PLFNBQVNaLFVBQVVLLElBQVYsQ0FBZjtBQUNBLE1BQUlPLE9BQU9DLE1BQVgsRUFBbUI7QUFDakIsUUFBSU4sT0FBSixFQUFhO0FBQ1gsWUFBTSxJQUFJTyxrQkFBSixDQUFnQixHQUFFUixPQUFRLEtBQUlNLE9BQU9HLElBQVAsQ0FBWSxJQUFaLENBQWtCLEVBQWhELENBQU47QUFDRCxLQUZELE1BRU87QUFDTCxZQUFNLElBQUlELGtCQUFKLENBQWVSLE9BQWYsQ0FBTjtBQUNEO0FBQ0Y7QUFDRiIsImZpbGUiOiJ2YWxpZGF0ZS1ib2R5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuaW1wb3J0IHtjcmVhdGVWYWxpZGF0b3J9IGZyb20gXCIuLi91dGlsL3NjaGVtYS12YWxpZGF0b3JcIlxuXG5pbXBvcnQge0JhZFJlcXVlc3R9IGZyb20gXCIuLi9lcnJvcnNcIlxuXG5pbXBvcnQgdHlwZSB7Q29udGV4dCwgTmV4dCwgTWlkZGxld2FyZX0gZnJvbSBcIi4uL21pZGRsZXdhcmVcIlxuXG5leHBvcnQgdHlwZSBWYWxpZGF0aW9uT3B0aW9ucyA9IHtcbiAgc2NoZW1hOiBPYmplY3QsXG4gIG1lc3NhZ2U6IHN0cmluZyxcbiAgZGV0YWlsczogYm9vbGVhbixcbiAgb3B0aW9uYWw6IGJvb2xlYW4sXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZhbGlkYXRlQm9keShvcHRpb25zOiBWYWxpZGF0aW9uT3B0aW9ucyk6IE1pZGRsZXdhcmUge1xuICBjb25zdCB2YWxpZGF0b3IgPSBjcmVhdGVWYWxpZGF0b3Iob3B0aW9ucy5zY2hlbWEpXG4gIHJldHVybiBmdW5jdGlvbiB2YWxpZGF0ZUJvZHkobmV4dDogTmV4dCkge1xuICAgICh0aGlzOiBDb250ZXh0KVxuXG4gICAgdmFsaWRhdGUodmFsaWRhdG9yLCB0aGlzLmRhdGEuYm9keSwgb3B0aW9ucylcbiAgICByZXR1cm4gbmV4dCgpXG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGUodmFsaWRhdG9yLCBib2R5LCB7bWVzc2FnZSA9IFwiUmVxdWVzdCBpcyBpbnZhbGlkXCIsIGRldGFpbHMgPSB0cnVlLCBvcHRpb25hbCA9IGZhbHNlfSkge1xuICAvKiBEb24ndCB2YWxpZGF0ZSBub24tSlNPTiBib2RpZXMgaWYgdGhlIHJlcXVlc3Qgc2NoZW1hIGlzIG9wdGlvbmFsLiAqL1xuICBpZiAoYm9keSA9PT0gdW5kZWZpbmVkIHx8IEJ1ZmZlci5pc0J1ZmZlcihib2R5KSkge1xuICAgIGlmIChvcHRpb25hbCkgcmV0dXJuXG5cbiAgICAvKiBWYWxpZGF0ZSBlbXB0eSBib2R5LiAqL1xuICAgIGJvZHkgPSB7fVxuICB9XG5cbiAgY29uc3QgZXJyb3JzID0gdmFsaWRhdG9yKGJvZHkpXG4gIGlmIChlcnJvcnMubGVuZ3RoKSB7XG4gICAgaWYgKGRldGFpbHMpIHtcbiAgICAgIHRocm93IG5ldyBCYWRSZXF1ZXN0KGAke21lc3NhZ2V9OiAke2Vycm9ycy5qb2luKFwiOyBcIil9YClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEJhZFJlcXVlc3QobWVzc2FnZSlcbiAgICB9XG4gIH1cbn1cbiJdfQ==