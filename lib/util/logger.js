"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Logger = undefined;

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _stackTrace = require("stack-trace");

var _stackTrace2 = _interopRequireDefault(_stackTrace);

var _hostPkg = require("./host-pkg");

var _hostPkg2 = _interopRequireDefault(_hostPkg);

var _memoryConsole = require("./memory-console");

var _memoryConsole2 = _interopRequireDefault(_memoryConsole);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry */
/* https://github.com/GoogleCloudPlatform/fluent-plugin-google-cloud/blob/master/lib/fluent/plugin/out_google_cloud.rb */
/* https://github.com/GoogleCloudPlatform/fluent-plugin-google-cloud/issues/99 */
/* Note, this also has the contents of jsonPayload, so it can contain
   arbitrary fields! */
const errorSeverity = new Set(["ERROR", "CRITICAL", "ALERT", "EMERGENCY"]);

let Logger = exports.Logger = class Logger {

  static get formatter() {
    return process.env.NODE_ENV === "development" ? Logger.PRETTY : Logger.JSON;
  }

  static get console() {
    return process.env.NODE_ENV === "test" ? new _memoryConsole2.default() : console;
  }

  static get service() {
    return {
      service: _hostPkg2.default.name,
      version: _hostPkg2.default.version
    };
  }

  constructor(console = Logger.console, formatter = Logger.formatter, service = Logger.service) {
    this.console = console;
    this.formatter = formatter;
    this.service = service;

    Object.freeze(this);
  }

  write(severity, message, context) {
    const entry = {
      time: new Date(),
      message: typeof message === "object" ? JSON.stringify(message) : String(message),
      serviceContext: this.service,
      severity
    };

    if (errorSeverity.has(severity)) {
      entry.context = { reportLocation: reportLocation() };
    }

    this.console.log(this.formatter(Object.assign(entry, context)));
  }

  debug(message, context = {}) {
    this.write("DEBUG", message, context);
  }

  info(message, context = {}) {
    this.write("INFO", message, context);
  }

  notice(message, context = {}) {
    this.write("NOTICE", message, context);
  }

  warning(message, context = {}) {
    this.write("WARNING", message, context);
  }

  error(message, context = {}) {
    this.write("ERROR", message, context);
  }

  critical(message, context = {}) {
    this.write("CRITICAL", message, context);
  }
};
Logger.JSON = JSON.stringify;

Logger.PRETTY = entry => {
  const reset = "\x1b[0m";
  const bold = "\x1b[1m";

  const black = "\x1b[30m";
  const red = "\x1b[31m";
  const green = "\x1b[32m";
  const yellow = "\x1b[33m";
  // const blue = "\x1b[34m"

  const dateOptions = {
    year: "numeric",
    month: "short",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit",
    second: "2-digit",
    hour12: false
  };

  const styles = {
    DEBUG: black + bold,
    INFO: reset,
    NOTICE: green + bold,
    WARNING: yellow + bold,
    ERROR: red + bold,
    CRITICAL: red + bold,
    ALERT: red + bold,
    EMERGENCY: red + bold
  };

  const time = `[${entry.time.toLocaleString("en", dateOptions)}]`;

  let http = "";
  if (entry.httpRequest) {
    const { remoteIp, requestMethod, requestUrl, status, responseSize } = entry.httpRequest;
    http = `${remoteIp || "unknown"} - ${requestMethod.toUpperCase()} ${requestUrl} ${status} ${responseSize} - `;
  }

  return `${time} ${styles[entry.severity]}${http}${entry.message}${reset}`;
};

function reportLocation(depth = 2) {
  const caller = _stackTrace2.default.get()[depth + 1];

  return {
    filePath: _path2.default.relative(process.cwd(), caller.getFileName()),
    lineNumber: caller.getLineNumber(),
    functionName: caller.getFunctionName() || "<anonymous>"
  };
}

exports.default = Logger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,