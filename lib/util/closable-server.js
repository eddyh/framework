"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClosableServer = undefined;

var _http = require("http");

let ClosableServer = exports.ClosableServer = class ClosableServer extends _http.Server {

  constructor() {
    super();

    this.closing = false;
    this.sockets = new Map();
    this.on("connection", socket => {
      this.sockets.set(socket, 0);

      socket.on("close", () => {
        this.sockets.delete(socket);
      });
    });

    this.on("request", (request, response) => {
      const socket = request.socket;
      this.sockets.set(socket, +this.sockets.get(socket) + 1);

      if (this.closing) {
        response.setHeader("Connection", "close");
      }

      response.on("finish", () => {
        const pending = +this.sockets.get(socket) - 1;
        this.sockets.set(socket, pending);

        if (this.closing && pending === 0) {
          socket.end();
        }
      });
    });
  }

  close(callback) {
    super.close(callback);

    this.closing = true;

    process.nextTick(() => {
      for (const [socket, pending] of this.sockets) {
        if (pending === 0) {
          socket.end();
        }
      }
    });

    return this;
  }
};
exports.default = ClosableServer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2Nsb3NhYmxlLXNlcnZlci5qcyJdLCJuYW1lcyI6WyJDbG9zYWJsZVNlcnZlciIsImNvbnN0cnVjdG9yIiwiY2xvc2luZyIsInNvY2tldHMiLCJNYXAiLCJvbiIsInNvY2tldCIsInNldCIsImRlbGV0ZSIsInJlcXVlc3QiLCJyZXNwb25zZSIsImdldCIsInNldEhlYWRlciIsInBlbmRpbmciLCJlbmQiLCJjbG9zZSIsImNhbGxiYWNrIiwicHJvY2VzcyIsIm5leHRUaWNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0E7O0lBTWFBLGMsV0FBQUEsYyxHQUFOLE1BQU1BLGNBQU4sc0JBQW9DOztBQUl6Q0MsZ0JBQWM7QUFDWjs7QUFEWSxTQUhkQyxPQUdjLEdBSEssS0FHTDtBQUFBLFNBRmRDLE9BRWMsR0FGaUIsSUFBSUMsR0FBSixFQUVqQjtBQUdaLFNBQUtDLEVBQUwsQ0FBUSxZQUFSLEVBQXVCQyxNQUFELElBQW9CO0FBQ3hDLFdBQUtILE9BQUwsQ0FBYUksR0FBYixDQUFpQkQsTUFBakIsRUFBeUIsQ0FBekI7O0FBRUFBLGFBQU9ELEVBQVAsQ0FBVSxPQUFWLEVBQW1CLE1BQU07QUFDdkIsYUFBS0YsT0FBTCxDQUFhSyxNQUFiLENBQW9CRixNQUFwQjtBQUNELE9BRkQ7QUFHRCxLQU5EOztBQVFBLFNBQUtELEVBQUwsQ0FBUSxTQUFSLEVBQW1CLENBQUNJLE9BQUQsRUFBMkJDLFFBQTNCLEtBQXdEO0FBQ3pFLFlBQU1KLFNBQVNHLFFBQVFILE1BQXZCO0FBQ0EsV0FBS0gsT0FBTCxDQUFhSSxHQUFiLENBQWlCRCxNQUFqQixFQUF5QixDQUFDLEtBQUtILE9BQUwsQ0FBYVEsR0FBYixDQUFpQkwsTUFBakIsQ0FBRCxHQUE0QixDQUFyRDs7QUFFQSxVQUFJLEtBQUtKLE9BQVQsRUFBa0I7QUFDaEJRLGlCQUFTRSxTQUFULENBQW1CLFlBQW5CLEVBQWlDLE9BQWpDO0FBQ0Q7O0FBRURGLGVBQVNMLEVBQVQsQ0FBWSxRQUFaLEVBQXNCLE1BQU07QUFDMUIsY0FBTVEsVUFBVSxDQUFDLEtBQUtWLE9BQUwsQ0FBYVEsR0FBYixDQUFpQkwsTUFBakIsQ0FBRCxHQUE0QixDQUE1QztBQUNBLGFBQUtILE9BQUwsQ0FBYUksR0FBYixDQUFpQkQsTUFBakIsRUFBeUJPLE9BQXpCOztBQUVBLFlBQUksS0FBS1gsT0FBTCxJQUFnQlcsWUFBWSxDQUFoQyxFQUFtQztBQUNqQ1AsaUJBQU9RLEdBQVA7QUFDRDtBQUNGLE9BUEQ7QUFRRCxLQWhCRDtBQWlCRDs7QUFFREMsUUFBTUMsUUFBTixFQUEyRDtBQUN6RCxVQUFNRCxLQUFOLENBQVlDLFFBQVo7O0FBRUEsU0FBS2QsT0FBTCxHQUFlLElBQWY7O0FBRUFlLFlBQVFDLFFBQVIsQ0FBaUIsTUFBTTtBQUNyQixXQUFLLE1BQU0sQ0FBQ1osTUFBRCxFQUFTTyxPQUFULENBQVgsSUFBZ0MsS0FBS1YsT0FBckMsRUFBOEM7QUFDNUMsWUFBSVUsWUFBWSxDQUFoQixFQUFtQjtBQUNqQlAsaUJBQU9RLEdBQVA7QUFDRDtBQUNGO0FBQ0YsS0FORDs7QUFRQSxXQUFPLElBQVA7QUFDRDtBQWhEd0MsQztrQkFtRDVCZCxjIiwiZmlsZSI6ImNsb3NhYmxlLXNlcnZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5pbXBvcnQge1NlcnZlcn0gZnJvbSBcImh0dHBcIlxuXG5pbXBvcnQgdHlwZSB7SW5jb21pbmdNZXNzYWdlLCBTZXJ2ZXJSZXNwb25zZX0gZnJvbSBcImh0dHBcIlxuXG50eXBlIFNvY2tldCA9IG5ldCRTb2NrZXRcblxuZXhwb3J0IGNsYXNzIENsb3NhYmxlU2VydmVyIGV4dGVuZHMgU2VydmVyIHtcbiAgY2xvc2luZzogYm9vbGVhbiA9IGZhbHNlXG4gIHNvY2tldHM6IE1hcDxTb2NrZXQsIG51bWJlcj4gPSBuZXcgTWFwXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKVxuXG4gICAgdGhpcy5vbihcImNvbm5lY3Rpb25cIiwgKHNvY2tldDogU29ja2V0KSA9PiB7XG4gICAgICB0aGlzLnNvY2tldHMuc2V0KHNvY2tldCwgMClcblxuICAgICAgc29ja2V0Lm9uKFwiY2xvc2VcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLnNvY2tldHMuZGVsZXRlKHNvY2tldClcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHRoaXMub24oXCJyZXF1ZXN0XCIsIChyZXF1ZXN0OiBJbmNvbWluZ01lc3NhZ2UsIHJlc3BvbnNlOiBTZXJ2ZXJSZXNwb25zZSkgPT4ge1xuICAgICAgY29uc3Qgc29ja2V0ID0gcmVxdWVzdC5zb2NrZXRcbiAgICAgIHRoaXMuc29ja2V0cy5zZXQoc29ja2V0LCArdGhpcy5zb2NrZXRzLmdldChzb2NrZXQpICsgMSlcblxuICAgICAgaWYgKHRoaXMuY2xvc2luZykge1xuICAgICAgICByZXNwb25zZS5zZXRIZWFkZXIoXCJDb25uZWN0aW9uXCIsIFwiY2xvc2VcIilcbiAgICAgIH1cblxuICAgICAgcmVzcG9uc2Uub24oXCJmaW5pc2hcIiwgKCkgPT4ge1xuICAgICAgICBjb25zdCBwZW5kaW5nID0gK3RoaXMuc29ja2V0cy5nZXQoc29ja2V0KSAtIDFcbiAgICAgICAgdGhpcy5zb2NrZXRzLnNldChzb2NrZXQsIHBlbmRpbmcpXG5cbiAgICAgICAgaWYgKHRoaXMuY2xvc2luZyAmJiBwZW5kaW5nID09PSAwKSB7XG4gICAgICAgICAgc29ja2V0LmVuZCgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGNsb3NlKGNhbGxiYWNrPzogKGVycm9yOiA/RXJyb3IpID0+IG1peGVkKTogQ2xvc2FibGVTZXJ2ZXIge1xuICAgIHN1cGVyLmNsb3NlKGNhbGxiYWNrKVxuXG4gICAgdGhpcy5jbG9zaW5nID0gdHJ1ZVxuXG4gICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IFtzb2NrZXQsIHBlbmRpbmddIG9mIHRoaXMuc29ja2V0cykge1xuICAgICAgICBpZiAocGVuZGluZyA9PT0gMCkge1xuICAgICAgICAgIHNvY2tldC5lbmQoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcblxuICAgIHJldHVybiB0aGlzXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xvc2FibGVTZXJ2ZXJcbiJdfQ==